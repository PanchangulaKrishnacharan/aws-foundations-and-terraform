# Best Practice: Use clear, descriptive names for workflows
name: 'Terraform Infrastructure Pipeline'

# Best Practice: Define specific trigger events
on:
  push:
    branches: [ main ]
    paths:
      - 'environments/dev/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'environments/dev/**'
      - '.github/workflows/**'

# Best Practice: Define minimum required permissions
permissions:
  contents: read
  pull-requests: write
  id-token: write # Required for AWS OIDC authentication

# Best Practice: Use concurrency to prevent concurrent deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Best Practice: Set job timeout limits
    
    defaults:
      run:
        # Best Practice: Specify working directory
        working-directory: ./environments/dev
        shell: bash  # Best Practice: Explicitly specify shell

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1  # Best Practice: Shallow clone for better performance

    # Best Practice: Pin to specific versions of actions
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'
        terraform_wrapper: false  # Best Practice: Disable wrapper for better error handling

    - name: Terraform Init
      id: init
      run: terraform init -input=false
      # Best Practice: Add error handling
      continue-on-error: false

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      # Best Practice: Add error handling
      continue-on-error: false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

  terraform-plan:
    name: 'Terraform Plan'
    needs: terraform-validate  # Best Practice: Define dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    defaults:
      run:
        working-directory: ./environments/dev
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    # Best Practice: Use OIDC for AWS authentication
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init -input=false

    # Best Practice: Add cost estimation
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -input=false -no-color -out=tfplan
        terraform show -json tfplan > plan.json
      
    # Best Practice: Save plan artifacts
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: |
          ./environments/dev/tfplan
          ./environments/dev/plan.json
        retention-days: 1

    # Best Practice: Add plan summary to PR
    - name: Add Plan Summary
      if: github.event_name == 'pull_request'
      run: |
        CHANGES=$(terraform show -no-color tfplan | grep -A 5000 "Terraform will perform the following actions")
        echo "### Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "$CHANGES" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  terraform-apply:
    name: 'Terraform Apply'
    needs: terraform-plan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    # Best Practice: Only apply on main branch
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # Best Practice: Use environments for deployments
    environment:
      name: dev
      url: ${{ steps.env_url.outputs.url }}
    
    defaults:
      run:
        working-directory: ./environments/dev
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init -input=false

    # Best Practice: Download plan from artifacts
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: ./environments/dev

    # Best Practice: Add apply confirmation step
    - name: Terraform Apply
      run: |
        terraform apply -auto-approve tfplan
        echo "Infrastructure successfully deployed!"

    # Best Practice: Add post-deployment verification
    - name: Verify Deployment
      id: env_url
      run: |
        # Add verification steps here
        echo "url=https://example.com" >> $GITHUB_OUTPUT

    # Best Practice: Add post-deployment cleanup
    - name: Cleanup
      if: always()
      run: |
        rm -f tfplan
        rm -f plan.json
